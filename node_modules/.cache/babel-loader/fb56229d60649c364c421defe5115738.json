{"ast":null,"code":"// rep logic for a slice of your app\n// ducks pattern\nimport { createSlice } from \"@reduxjs/toolkit\";\nvar initialState = {\n  value: 0\n};\nvar counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialState,\n  reducers: {\n    incremented: function incremented(state) {\n      state.value++;\n    },\n    addSome: function addSome(state, action) {\n      state.value += action.payload;\n    }\n  }\n});\nvar incremented = counterSlice.actions.incremented;\nexport { incremented };\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/Users/tedaneblake/Documents/dev-react/modern-redux/src/features/counter/counter-slice.tsx"],"names":["createSlice","initialState","value","counterSlice","name","reducers","incremented","state","addSome","action","payload","actions","reducer"],"mappings":"AAAA;AACA;AAEA,SAASA,WAAT,QAA2C,kBAA3C;AAMA,IAAMC,YAA0B,GAAG;AACjCC,EAAAA,KAAK,EAAE;AAD0B,CAAnC;AAIA,IAAMC,YAAY,GAAGH,WAAW,CAAC;AAC/BI,EAAAA,IAAI,EAAE,SADyB;AAE/BH,EAAAA,YAAY,EAAZA,YAF+B;AAG/BI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WADQ,uBACIC,KADJ,EACW;AACjBA,MAAAA,KAAK,CAACL,KAAN;AACD,KAHO;AAIRM,IAAAA,OAJQ,mBAIAD,KAJA,EAIOE,MAJP,EAIsC;AAC5CF,MAAAA,KAAK,CAACL,KAAN,IAAeO,MAAM,CAACC,OAAtB;AACD;AANO;AAHqB,CAAD,CAAhC;AAaO,IAAQJ,WAAR,GAAwBH,YAAY,CAACQ,OAArC,CAAQL,WAAR;;AACP,eAAeH,YAAY,CAACS,OAA5B","sourcesContent":["// rep logic for a slice of your app\n// ducks pattern\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface counterState {\n  value: number;\n}\n\nconst initialState: counterState = {\n  value: 0,\n};\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    incremented(state) {\n      state.value++;\n    },\n    addSome(state, action: PayloadAction<number>) {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { incremented } = counterSlice.actions;\nexport default counterSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}