{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"../features/counter/counter-slice.tsx\";\nexport var store = configureStore({\n  reducer: {\n    counter: counterReducer\n  }\n}); // using type script inference to dynamically set type","map":{"version":3,"sources":["/Users/tedaneblake/Documents/dev-react/modern-redux/src/app/store.tsx"],"names":["configureStore","counterReducer","store","reducer","counter"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AAEA,OAAOC,cAAP,MAA2B,uCAA3B;AAEA,OAAO,IAAMC,KAAK,GAAGF,cAAc,CAAC;AAClCG,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAEH;AADF;AADyB,CAAD,CAA5B,C,CAMP","sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\n\nimport counterReducer from \"../features/counter/counter-slice.tsx\";\nimport { apiSlice } from \"../features/players/players-api-slice.jsx\";\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n\n// using type script inference to dynamically set type\nexport type appDispatch = typeof store.dispatch;\nexport type rootState = ReturnType<typeof store.getState>;\n"]},"metadata":{},"sourceType":"module"}